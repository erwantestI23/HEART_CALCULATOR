#include "M5Cardputer.h"
#include "M5GFX.h"
#include <Adafruit_NeoPixel.h>

#define IMAGE_WIDTH 19
#define IMAGE_HEIGHT 20

Adafruit_NeoPixel strip(2, 21, NEO_GRB + NEO_KHZ800);

unsigned long lastBeatTime = 0;
unsigned long currentTime = 0;

float bpm = 0;

int beatCount = 0;

const uint16_t epd_bitmap_img [] PROGMEM = {
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x3142, 0xe58a, 0xf5aa, 0xfd8a, 0xf58a, 0xfdaa, 0xb427, 0x0000, 
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xee0c, 0xe586, 0xf586, 0xfd86, 0xfd86, 0xfd45, 
  0xfd45, 0xf525, 0xdce6, 0x93a7, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xedac, 0xe549, 0xe547, 0xfd86, 
  0xfd64, 0xfd64, 0xfda5, 0xfdc6, 0xf546, 0xbbe3, 0x9301, 0xcd2c, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xdd2b, 0xed48, 
  0xa300, 0xab61, 0xf566, 0xfd85, 0xfda5, 0xfda5, 0xed87, 0xedaa, 0xedee, 0xcceb, 0xa384, 0x18c2, 0x0000, 0x0000, 0x0000, 0x0000, 
  0x2923, 0xf5ac, 0xbb61, 0xe4e7, 0xf58a, 0xfd89, 0xfd67, 0xfd85, 0xfda8, 0xee4f, 0xffb8, 0x842d, 0xac8d, 0xd52b, 0xdd6c, 0x0000, 
  0x0000, 0x0000, 0x0000, 0xb4cd, 0xf58a, 0xfd48, 0xe508, 0xab21, 0x8a40, 0xd425, 0xfd67, 0xfdca, 0xff77, 0x734a, 0x8bed, 0x31a5, 
  0xc4eb, 0xedaa, 0x0000, 0x0000, 0x0000, 0x0000, 0xddce, 0xf5c9, 0xfd87, 0x9aa0, 0x9240, 0xbbe6, 0x7160, 0xf4e6, 0xfdab, 0xde34, 
  0x3985, 0x3124, 0x0000, 0xfeaf, 0xf589, 0x72e8, 0x0000, 0x0000, 0x0000, 0xee0f, 0xed87, 0xf566, 0xe4e8, 0xed4c, 0xe56d, 0xcc68, 
  0xfd4b, 0xf56c, 0xff78, 0xd636, 0xee98, 0xff99, 0xfe0b, 0xf588, 0xa44b, 0x0000, 0x0000, 0x0000, 0xf5ef, 0xf588, 0xfd87, 0xf56a, 
  0xed6c, 0xe5ad, 0xe5ae, 0xf52e, 0xed2e, 0xe590, 0xdd8e, 0xe56d, 0xf58b, 0xfd87, 0xf589, 0x93ca, 0x0000, 0x0000, 0x0000, 0xfe31, 
  0xfd89, 0xfda8, 0xfd49, 0xfe10, 0xfdf2, 0xfe15, 0xfdd7, 0xfdd7, 0xfdb5, 0xfe33, 0xfded, 0xfd68, 0xfd66, 0xed88, 0x41c5, 0x0000, 
  0x0000, 0x0000, 0x942d, 0xed48, 0xfd46, 0xfce9, 0xd2e7, 0xb969, 0xc0ec, 0xc0ed, 0xc8cd, 0xd10e, 0xc129, 0xd307, 0xfd29, 0xfd67, 
  0xed89, 0x0000, 0x0000, 0x0000, 0x0000, 0x10a2, 0xedcb, 0xfda8, 0xfd4a, 0xfc0b, 0xd10b, 0xe8d0, 0xe090, 0xe891, 0xe8d1, 0xc8cb, 
  0xfc4c, 0xfd49, 0xf589, 0xee0d, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x9c8c, 0xe5cb, 0xf507, 0xfd0c, 0xe9eb, 0xe8ce, 0xe870, 
  0xf090, 0xd8ae, 0xea4d, 0xfccb, 0xfd89, 0xe5ae, 0x0861, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x18c2, 0xff34, 0xf5ed, 0xfccc, 
  0xfbaf, 0xd94b, 0xd8ee, 0xe12f, 0xd9ac, 0xfbae, 0xfd4c, 0xed8b, 0x5aa8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
  0x632b, 0xff39, 0xfe35, 0xf511, 0xf450, 0xc22c, 0xc24b, 0xec4e, 0xf550, 0xfe53, 0xb530, 0x6b4c, 0x0000, 0x0000, 0x0000, 0x0000, 
  0x0000, 0x0000, 0x0000, 0x0000, 0x2945, 0xc617, 0xff9b, 0xfef9, 0xfefa, 0xff1a, 0xff37, 0xff98, 0xef18, 0x4a48, 0x0000, 0x0000, 
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4228, 0x4a69, 0x4a28, 0x5289, 0x0000, 0x0000, 
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};
const uint16_t epd_bitmap_heart [] PROGMEM = {
  0x0000, 0x0000, 0x0000, 0x0000, 0xf800, 0xf800, 0xf800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xf800, 0xf800, 0xf800, 
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0x0000, 0x0000, 0xf800, 
  0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0x0000, 0x0000, 0x0000, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
  0xf800, 0x1000, 0x0000, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0x0000, 0xf800, 0xf800, 0xf800, 0xf800, 
  0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
  0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
  0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
  0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
  0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
  0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
  0x0000, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
  0xf800, 0xf800, 0xf800, 0xf800, 0x0000, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
  0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0x0000, 0x0000, 0x0000, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
  0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xf800, 
  0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0x0000, 0x0000, 0x0000, 
  0x0000, 0x0000, 0x0000, 0x0000, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
  0xf800, 0xf800, 0xf800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xf800, 0xf800, 
  0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
  0x0000, 0x0000, 0x0000, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xf800, 0xf800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

void drawBitmapImage(int x, int y, int width, int height, const uint16_t *bitmap) {
    M5Cardputer.Display.drawBitmap(x, y, width, height, bitmap);
}
void calculateBPM() {
    if (lastBeatTime > 0) {
        unsigned long timeDifference = currentTime - lastBeatTime; // Temps entre deux frappes
        bpm = 60000.0 / timeDifference; // Calcul du BPM (60000 ms par minute)
        beatCount++;
    }
    lastBeatTime = currentTime; // Mise à jour du dernier battement
}
void heart() {
 // epd_bitmap_heart
    M5Cardputer.Display.drawBitmap(180, 50, 20, 20, epd_bitmap_heart);
    strip.setPixelColor(0, strip.Color(255,0,0));         //  Set pixel's color (in RAM)
    strip.show(); 
    delay(200);
    M5Cardputer.Display.fillRect(180, 50, 20, 20, BLACK); // Effacer la zone précédente
    strip.setPixelColor(0, strip.Color(0,0,0));         //  Set pixel's color (in RAM)
    strip.show(); 

}
void setup() {
    strip.begin(); // Initialize NeoPixel strip object (REQUIRED)
    strip.show();
    auto cfg = M5.config();
    M5Cardputer.begin(cfg, true); // Initialisation du Cardputer
    M5Cardputer.Display.setRotation(1); // Orientation de l'écran
    M5Cardputer.Display.fillScreen(BLACK);
    M5Cardputer.Display.setTextSize(1.5);
    M5Cardputer.Display.setTextColor(WHITE);
    M5Cardputer.Display.setCursor(0, 0);
    M5Cardputer.Display.println("      BPM Calculator");
    M5Cardputer.Display.setTextColor(0xCCCCCC);
    M5Cardputer.Display.println("Press any key except RST ");
    drawBitmapImage(220, 10, IMAGE_WIDTH, IMAGE_HEIGHT, epd_bitmap_img);
    M5Cardputer.Lcd.drawLine(0, 30, 240, 30, WHITE);  // (x1, y1) -> (x2, y2) avec la couleur blanche
    M5Cardputer.Display.setTextColor(WHITE);


}

void loop() {
    M5Cardputer.update();

    // Vérification des entrées clavier
    if (M5Cardputer.Keyboard.isChange() && M5Cardputer.Keyboard.isPressed() || M5.BtnA.wasPressed()) {
        currentTime = millis(); // Temps actuel en millisecondes
        calculateBPM(); // Calcul du BPM

        // Afficher le résultat
        M5Cardputer.Display.fillRect(0, 50, 160, 80, BLACK); // Effacer la zone précédente
        M5Cardputer.Display.setCursor(0, 50);
        M5Cardputer.Display.printf("Beats: %d\n", beatCount);
        M5Cardputer.Display.printf("BPM: %.2f\n", bpm);
        heart();
    }
}
